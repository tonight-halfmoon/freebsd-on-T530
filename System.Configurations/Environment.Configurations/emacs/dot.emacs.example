;;; package --- Summary:
;;; Commentary:
;;; Code:

(require 'package)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
  (add-to-list 'package-archives (cons "melpa-stable" (concat proto
                                                              "://stable.melpa.org/packages/")) t)
  (add-to-list 'package-pinned-packages '(elixir-mode . "melpa-stable")))
(package-initialize)

;; ==============================================================================================
;; pkg-install
;; ==============================================================================================
;; Consume a list of Emacs MELPA packages
;; Traverse each package in the list
;; Prompt for install
;; User answer y/n.
;; The MELPA install is not successful if missing library behind
;; on the OS is required.
;; In addition, add-to-list package remote source could be necessary
;; to tell MELPA where to look for the source. See above, the section before package-initialize.
;; Reference: [](https://stackoverflow.com/a/10095853)
(defun pkg-install
    (&rest
     tail)
  "Prompt for each package in TAIL install with y/n."
  (mapcar (lambda (next)
            (if (package-installed-p next) nil (if (y-or-n-p(format "Install packge '%s'?" next))
                                                   (package-install next) next))) tail))
(or (file-exists-p package-user-dir)
    (package-refresh-contents))
(pkg-install 'nlinum ;; `Emacs's buffer line number column display
             'whitespace-cleanup-mode 'company
             ;; `w3' - Emacs W3 web browser
             'w3
             ;; `Markdown'
             'markdown-mode ;; 'markdown-preview-mode
             ;; `Elixir'
             'elixir-mode 'ac-alchemist
             ;; `Flycheck'
             'flycheck 'flycheck-mix 'flycheck-rebar3 'flycheck-color-mode-line 'flycheck-pos-tip
             'flycheck-title
             ;; Flycheck extension for `yaml' script support
             'flycheck-yamllint
             ;; Flycheck extension for `shell'/`bash' script support
             'flycheck-checkbashisms
             ;; Flycheck extension for `Python' support
             'flycheck-pycheckers
             ;; `JavaScript'
             'js-auto-format-mode
             ;; `Web' mode
             'web-mode
             ;; `web-beautify'
             'web-beautify
             ;; `Python' mode
             'python-mode
             ;; `auto-complete' mode
             'auto-complete
             ;; `Projectile'
             'projectile
             ;; Groovy
             'groovy-mode
             ;; YAML mode
             'yaml-mode
             ;; Dockerfile mode
             'dockerfile-mode
             ;;
             )

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(file-coding-system-alist (quote (("\\.json\\'" . utf-8)
                                    ("\\.conf\\'" . utf-8)
                                    ("\\.tzst\\'" no-conversion . no-conversion)
                                    ("\\.zst\\'" no-conversion . no-conversion)
                                    ("\\.dz\\'" no-conversion . no-conversion)
                                    ("\\.txz\\'" no-conversion . no-conversion)
                                    ("\\.xz\\'" no-conversion . no-conversion)
                                    ("\\.lzma\\'" no-conversion . no-conversion)
                                    ("\\.lz\\'" no-conversion . no-conversion)
                                    ("\\.g?z\\'" no-conversion . no-conversion)
                                    ("\\.\\(?:tgz\\|svgz\\|sifz\\)\\'" no-conversion .
                                     no-conversion)
                                    ("\\.tbz2?\\'" no-conversion . no-conversion)
                                    ("\\.bz2\\'" no-conversion . no-conversion)
                                    ("\\.Z\\'" no-conversion . no-conversion)
                                    ("\\.elc\\'" . utf-8-emacs)
                                    ("\\.el\\'" . prefer-utf-8)
                                    ("\\.utf\\(-8\\)?\\'" . utf-8)
                                    ("\\.xml\\'" . xml-find-file-coding-system)
                                    ("\\(\\`\\|/\\)loaddefs.el\\'" raw-text . raw-text-unix)
                                    ("\\.tar\\'" no-conversion . no-conversion)
                                    ("\\.po[tx]?\\'\\|\\.po\\." . po-find-file-coding-system)
                                    ("\\.\\(tex\\|ltx\\|dtx\\|drv\\)\\'" .
                                     latexenc-find-file-coding-system)
                                    ("" undecided))))
 '(flycheck-color-mode-line-face-to-color (quote mode-line-buffer-id))
 '(flycheck-highlighting-mode (quote symbols))
 '(global-flycheck-mode t)
 '(js-auto-format-command "prettier")
 '(js-auto-format-command-args "--write --single-quote --no-semi")
 '(mode-require-final-newline t)
 '(nlinum-format " %3i ")
 '(nlinum-highlight-current-line t)
 '(nlinum-widen t)
 '(package-selected-packages (quote (dockerfile-mode yaml-mode groovy-mode projectile python-mode
                                                     web-beautify web-mode js-auto-format-mode
                                                     flycheck-pycheckers flycheck-checkbashisms
                                                     flycheck-yamllint flycheck-title
                                                     flycheck-pos-tip flycheck-color-mode-line
                                                     flycheck-rebar3 flycheck-mix flycheck
                                                     ac-alchemist elixir-mode markdown-mode w3
                                                     company whitespace-cleanup-mode nlinum)))
 '(safe-local-variable-values (quote ((buffer-file-coding-system . utf-8)
                                      (sh-indent-comment . t)
                                      (allout-layout . t))))
 '(whitespace-display-mappings (quote ((space-mark 32 []
                                                   [46]
                                                   [0]
                                                   [32]
                                                   [42]
                                                   [46])))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(company-tooltip ((t
                     (:foreground "cyan"))))
 '(company-tooltip-selection ((t
                               (:background "white"))))
 '(cursor ((t
            (:background "black"
                         :foreground "magenta"))))
 '(minibuffer-prompt ((t
                       (:foreground "green"))))
 ;; Mode-line face active
 ;; Check installed theme, `color-theme'
 ;; if this customisation does not work
 '(mode-line ((t
               (:background "cyan"
                            :foreground "white"))))
 '(mode-line-buffer-id ((t
                         (:background "magenta"
                                      :foregorund "gray"))))
 '(mode-line-inactive ((t :foregorund "gray")))
 '(modeline ((t
              (:background "cyan"
                           :foreground "white"))))
 '(whitespace-big-indent ((t nil)))
 '(whitespace-space ((t
                      (:bold t
                             :foreground "green"))))
 '(whitespace-trailing ((t
                         (:foreground "green"
                                      :weight bold)))))

;; =============================================================================================
;; Erlang Mode
;; =============================================================================================
(add-to-list 'load-path (car (file-expand-wildcards "/usr/local/lib/erlang/lib/tools-*/emacs")))
(setq erlang-root-dir "/usr/local/lib/erlang")
(setq exec-path (cons "/usr/local/lib/erlang/bin" exec-path))
(require 'erlang-start)
(require 'erlang)

(add-to-list 'auto-mode-alist '("\\.config?$" . erlang-mode))

(defun seriott-erlang-mode-hooks ()
  "Hooks for Erlang mode."
  (setq indent-tabs-mode nil)
  (setq allout-auto-activation t)
  (setq erlang-indent-level 2)
  (local-set-key (kbd "RET") 'newline-and-indent))
(add-hook 'erlang-mode-hook 'seriott-erlang-mode-hooks)

(defun seriott-erlang-mode-save-hooks ()
  "Save hooks for Erlang mode."
  (erlang-indent-current-buffer)
  (whitespace-cleanup)
  (delete-trailing-whitespace))
(add-hook 'erlang-mode-hook (lambda()
                              (add-hook 'before-save-hook 'seriott-erlang-mode-save-hooks t t)))

;; ======================================================================================
;; emacs-lisp `elisp` Mode
;; ======================================================================================
;; Reference [](https://github.com/Yuki-Inoue/elisp-format/blob/master/elisp-format.el)
;; wget (https://raw.githubusercontent.com/Yuki-Inoue/elisp-format/master/elisp-format.el
;; into `~/.emacs.d/elisp-format`
(add-to-list 'load-path "~/.emacs.d/elisp-format")
(require 'elisp-format)
(defun ear-emacs-lisp-mode-save-hooks ()
  "Save hooks for emacs-lisp mode."
  (when (eq major-mode 'emacs-lisp-mode)
    (elisp-format-buffer)
    (whitespace-cleanup)
    (delete-trailing-whitespace)))
(add-hook 'before-save-hook 'ear-emacs-lisp-mode-save-hooks)

;; ==========================================================
;; Company Mode
;; ==========================================================
;; Either Utilise `company-mode` or `auto-complete-mode`
;; (add-hook 'after-init-hook 'global-company-mode)

;; ===========================================================
;; Cursor
;; ===========================================================
;; For FreeBSD users, in vty:`sc` mode evaulate the folllowing
;; command: `vidcontrol -c destructive`
(setq-default cursor-type 'hbar)
;; (set-cursor-color "#7F00FF")

;; ===================================
;; Nlinum - Buffer Line Numbers Column
;; ===================================
(global-nlinum-mode t)

;; ======================================================================================
;; color-theme
;; ======================================================================================
;; Reference [](http://nongnu.org/color-theme)
;; wget http://download.savannah.nongnu.org/releases/color-theme/color-theme-6.6.0.tar.gz
;; `7z x color-theme-6.6.0.tar.gz` into the `color-theme' directory
(add-to-list 'load-path "~/.emacs.d/color-theme")
(require 'color-theme)

;; (color-theme-euphoria)
;; (color-theme-clarity)
;; (color-theme-comidia)
;; (color-theme-tty-dark)
;; (color-theme-jsc-dark)

;; customised theme source "~/.emacs.d/color-theme/themes/color-theme-amado.el"
(eval-after-load "color-theme" '(progn (color-theme-initialize)
                                       (color-theme-arneson)
                                       (color-theme-amado)))
;; ===============
;; Font lock mode
;; ===============
(font-lock-mode t)

;; ==================================
;; Matching pairs - Show `paren' mode
;; ==================================
(show-paren-mode 1)

;; ===========================================
;; Key `binding'
;; ===========================================
(global-set-key (kbd "M-9") 'kill-whole-line)
(global-set-key (kbd "C-x p")
                (lambda()
                  (interactive)
                  (other-window -1)))

;; ==============================================================
;; `Indentation'
;; ==============================================================
;; No tabs by default. Modes that really need tabs should enable
;; indent-tabs-mode explicitly. `makefile-mode' already does that
;; To keep showing dots for every single whitespace
;;  - Set show `whitespace-big-indent' to nil (check above)
;;  - `intend-tabs-mode' to nil as follows
(setq-default indent-tabs-mode nil)
;; Default tab width `indent size` is 2
(setq-default tab-width 2)
;; Enable auto indent
(define-key global-map (kbd "RET") 'newline-and-indent)

;; Hooks
;; Either Indent according to Major Mode
;; or save add hook on specific Major Mode Hook
;; (add-hook 'before-save-hook (lambda()
;; (if (not indent-tabs-mode)
;; (indent-according-to-mode)
;; (untabify (point-min)(point-max))
;;                              (indent-region (point-min)
;;                                             (point-max) nil)))

;; ==========
;; Whitespace
;; ==========

;; ===================================================================
;; Spell check
;; ===================================================================
;; (autoload 'flyspell-mode "flyspell" "on-the-fly check spelling." t)
;; (add-hook 'LaTex-mode-hook 'flyspell-mode)
;; (add-hook 'text-mode-hook 'flyspell-mode)

;; =====================================================================
;; `markdown' Mode
;; =====================================================================
(defun ser-markdown-mode-hooks ()
  "Hooks for Markdown mode."
  (setq indent-tabs-mode nil)
  (setq tab-width 2)
  (setq allout-auto-activation t)
  (setq markdown-indent-on-enter t)
  (add-hook 'local-write-file-hooks (lambda()
                                      (indent-according-to-mode)
                                      (whitespace-cleanup)
                                      (delete-trailing-whitespace) nil)))
(add-hook 'markdown-mode-hook 'ser-markdown-mode-hooks)

;; ==========================================================================================================
;; Elixir Mode
;; ==========================================================================================================
;; Reference [](https://github.com/elixir-editors/emacs-elixir)
;; wget https://raw.githubusercontent.com/elixir-editors/emacs-elixir/master/elixir-format.el
(add-to-list 'load-path "~/.emacs.d/elixir-format")
(require 'elixir-format)
;; Save hook `formatting` for Elixir Mode.
(add-hook 'elixir-mode-hook (lambda()
                              (add-hook 'before-save-hook 'elixir-format nil t)))

;; The following hook assumes `.formatter.exs' file exists in the directory
;; containing the target source code
;; Reference [](https://github.com/elixir-editors/emacs-elixir\
;; #add-elixir-mode-hook-to-run-elixir-format-on-file-save)
;; Reference [mix format](https://hexdocs.pm/mix/master/Mix.Tasks.Format.html)
(add-hook 'elixir-mode-hook (lambda()
                              (setq elixir-format-arguments (list "--dot-formatter" (concat
                                                                                     (locate-dominating-file
                                                                                      buffer-file-name
                                                                                      ".formatter.exs")
                                                                                     ".formatter.exs")))
                              (setq elixir-format-arguments nil)))

;; ==================================================================
;; Ac alchemist // native alchemist does not support aut-complete AC
;; ==================================================================
;; Reference [](https://github.com/syohex/emacs-ac-alchemist)
(add-hook 'elixir-mode-hook 'ac-alchemist-setup)

;; ==========================================================
;; Flycheck
;; ==========================================================
;; Flycheck global mode is set with emacs's
;; custom-set-varibles section above
;; (global-flycheck-mode t)
;; (add-hook 'after-init-hook #'global-flycheck-mode)

;; Flycheck extension for Elixir support
;; Reference [](https://github.com/tomekowal/flycheck-mix)
(require 'flycheck-mix)
(flycheck-mix-setup)

;; ===================================================================
;; JavaScript Mode
;; ===================================================================
;; Dependency:
;; Choose either `eslint` or `prettier`
;; (1) eslint
;; npm install --global eslint
;; add ~/.eslintrc with contents,
;; e.g., { "extends": "eslint:recommended" }
;; (2) prettier
;; npm install --global prettier
;; Reference [](https://github.com/ybiquitous/js-auto-format-mode)
;; Configure formatting engine (either eslint or prettier), as follows
;; Configure with `prettier` ( - see above):
;; (custom-set-variables
;; '(js-auto-format-command "prettier")
;; '(js-auto-format-command-args "--write --single-quote --no-semi"))
(setq-default js-indent-level 2)
(add-hook 'after-init-hook (lambda()
                             (js-auto-format-mode)))

;; (defun seriott-js-af-mode-hooks ()
;;   "Hooks for js af mode."
;;   (local-set-key (kbd "RET") 'newline-and-indent))
;; (add-hook 'js-auto-format-mode-hook 'seriott-js-af-mode-hooks)

(defun seriott-js-af-mode-save-hooks ()
  "Save hooks for js mode."
  (when (eq major-mode 'js-mode)
    (whitespace-cleanup)
    (delete-trailing-whitespace)
    (js-auto-format-execute)))
(add-hook 'before-save-hook 'seriott-js-af-mode-save-hooks)

;; ===========================================================================
;; `Web' Mode : configured for html, eex.html, json
;; ===========================================================================
;; Reference: [](http://web-mode.org/)
;; $ wget https://raw.githubusercontent.com/fxbois/web-mode/master/web-mode.el
(add-to-list 'load-path "~/.emacs.d/web-mode")
(require 'web-mode)

(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.eex?\\'" . web-mode))

;; In case you are not satisfied with `web-mode' for formatting `json' files,
;; then try `json-mode' and format with `json-mode-beautify'
;; Check defined hook `sat-json-mode-hooks', enable it to try it, and disable
;; the following line.
;; (add-to-list 'auto-mode-alist '("\\.json?\\'" . web-mode))

;; Configure engine(s) when file extension is too general or unknown
;; Examples:
;; (setq web-mode-engines-alist '(("php"    . "\\.phtml\\'")
;;                               ("blade"  . "\\.blade\\.")))

;; Configure
;; `Examples':
;; (add-to-list 'auto-mode-alist '("\\.api\\'" . web-mode))
;; (add-to-list 'auto-mode-alist '("/some/react/path/.*\\.js[x]?\\'" . web-mode))

;; Associate a file path with content type
;; `Example': (amend the path as necessary)
;; (setq web-mode-content-types-alist '(("json" . "/some/path/.*\\.api\\'")
;; ("xml"  . "/other/path/.*\\.api\\'")
;; ("jsx"  . "/some/react/path/.*\\.js[x]?\\'")))

;; (setq-default web-mode-indent-style 2)

(defun seriott-web-mode-hooks ()
  "Hooks for Web mode."
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-attr-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-script-padding 2)
  (setq web-mode-style-padding 2)
  (setq web-mode-block-padding 4)
  (setq web-mode-enable-current-column-highlight t)
  (setq web-mode-enable-current-element-highlight t)
  (add-hook 'local-write-file-hooks (lambda()
                                      (whitespace-cleanup)
                                      (indent-according-to-mode)
                                      (indent-region (point-min)
                                                     (point-max) nil)
                                      (delete-trailing-whitespace) nil)))
(add-hook 'web-mode-hook (lambda()
                           (seriott-web-mode-hooks)))

;; =====================================================================================
;; `web-beautify' formatter
;; =====================================================================================
;; Dependency: $ npm install -g js-beautify
;; Passing formatting configurations:
;; `Option-1'
;; add file `~/.jsbeautifyrc` with contents {"indent-size": 2, "end_with_newline": true}
;; `Option-2'
;; via environment variable
;; Other options, check: [](https://github.com/beautify-web/js-beautify#options)
;; Reference: [](https://github.com/yasuyk/web-beautify)
(defun halloween-web-beautify-hooks ()
  "Hooks with web-beautify."
  ;; (!) Becarefull! Add one and only one for the same major mode.
  ;; (web-beautify-html-buffer)
  (setenv "jsbeautify_indent_size" "2")
  (setenv "jsbeautify_end_with_newline" "true")
  (setq indent-tabs-mode nil)
  (add-hook 'before-save-hook (lambda()
                                (web-beautify-js-buffer)
                                (whitespace-cleanup))))

;; =========================================
;; Format with `web-beautify' in `json-mode'
;; =========================================
(add-hook 'json-mode-hook 'halloween-web-beautify-hooks)

;; ===========================================================================
;; `Json' Mode -- not being utilised! Check `web-beautify' hooks
;; ===========================================================================
(defun sat-json-mode-hooks ()
  "Hooks for json mode."
  ;; json-mode utilizes json-reforamt
  ;; Two major problems
  ;; (1) - Change order of json content/value withing the same level
  ;; (2) - Removes file/buffer final newline
  (setq json-reformat:indent-width 2)
  (setq mode-require-final-newline (quote require-final-newline))
  (add-hook 'before-save-hook (lambda()
                                (json-mode-beautify)
                                (indent-according-to-mode)
                                (whitespace-cleanup))))
;; (add-hook 'json-mode-hook 'sat-json-mode-hooks)

;; ==========================================================
;; `Python' Mode
;; ==========================================================
(require 'python-mode)
(defun ser-python-mode-hooks ()
  "Hooks for python mode."
  (setq python-indent-offset 2)
  (setq python-indent-guess-indent-offset 2)
  (setq python-indent 2)
  (add-hook 'local-write-file-hooks (lambda()
                                      (whitespace-cleanup)
                                      (indent-according-to-mode)
                                      (delete-trailing-whitespace))))
(add-hook 'python-mode-hook (lambda()
                              (ser-python-mode-hooks)))

(with-eval-after-load 'flycheck (add-hook 'flycheck-mode-hook #'flycheck-pycheckers-setup))

;; `Elpy'
;; Reference [](https://elpy.readthedocs.io/en/latest/introduction.html\#installation)
;; (elpy-enable)

;; ======================================================================
;; `auto-complete' AC mode
;; ======================================================================
(require 'auto-complete)
;; Reference [](https://github.com/auto-complete/auto-complete/issues/191)
(defun plg-ac-config()
  "Configure auto-complete AC Mode."
  (setq ac-auto-start 1)
  (setq ac-dwim t)
  (setq ac-quick-help-display 0.1)
  (setq ac-override-local-map nil)
  (setq ac-ignore-case t)
  (global-auto-complete-mode t))
(mapc (lambda(mode)
        (add-to-list 'ac-modes mode))
      '(erlang-mode elixir-mode js-mode python-mode markdown-mode web-mode latex-mode text-mode
                    eshell-mode emacs-lisp-mode))
(plg-ac-config)

;; ===========================================================================================
;; `Projectile' mode
;; ==============================================================================================
(projectile-mode +1)
(define-key projectile-mode-map (kbd "C-c C-c") 'projectile-command-map)

;; =======================================================
;; `conf-unix' mode
;; =======================================================
(defun ni-conf-unix-mode-hooks()
  "Hooks for conf-unix mode."
  (setq indent-tabs-mode nil)
  (setq tab-width 2)
  (setq require-final-newline (quote mode-require-final-newline))
  (add-hook 'before-save-hook (lambda()
                                (indent-region (point-min)
                                               (point-max))
                                (whitespace-cleanup)
                                (delete-trailing-whitespace))))
(add-hook 'conf-unix-mode-hook 'ni-conf-unix-mode-hooks)

;; `====================================================================='
;; `Require-final-new-line'
;; `====================================================================='
;; Check `custom-set-variables' above.
;; In a target major-mode hook, you could prompt user to keeping a new
;; line at the end of the current file with `before-save-hook' for example.
;; (setq require-final-newline (quote mode-require-final-newline))
;; Option 2: without prompt:
;; (setq mode-require-final-newline (quote require-final-newline))

;; `====================================================================='
;; `shell-script' / `sh' mode
;; `====================================================================='
(defun ni-sh-mode-hooks()
  "Hooks for sh mode."
  (setq require-final-newline (quote mode-require-final-newline))
  (setq indent-tabs-mode nil sh-basic-offset 2)
  (add-hook 'before-save-hook (lambda()
                                (indent-region (point-min)
                                               (point-max))
                                (whitespace-cleanup))))
(add-hook 'sh-mode-hook 'ni-sh-mode-hooks)

;; ==================================
;; `Dockerfile' mode
;; ==================================
(defun jeng-dockerfile-mode-hooks ()
  "Hooks for Dockerfile mode."
  (setq indent-tabs-mode nil)
  (setq tab-width 2)
  (add-hook 'before-save-hook (lambda()
                                (whitespace-cleanup))))
(add-hook 'dockerfile-mode 'jeng-dockerfile-mode-hooks)

;; =======================================================
;; `Dockerfile' linter
;; =======================================================
;; Reference: [](https://github.com/hadolint/hadolint.git)

;; =======================================================
;; `groovy' mode
;; =======================================================
(defun jeng-groovy-mode-hooks ()
  "Hooks for groovy mode."
  (setq indent-tabs-mode nil)
  (setq groovy-indent-offset 2)
  (add-hook 'before-save-hook (lambda()
                                (indent-region (point-min)
                                               (point-max))
                                (whitespace-cleanup))))
(add-hook 'groovy-mode-hook 'jeng-groovy-mode-hooks)

;; =======================================================
;; `yaml' mode
;; =======================================================
(require 'yaml-mode)
(defun mor-yaml-mode-hooks ()
  "Hooks for yaml mode."
  (setq indent-tabs-mode nil)
  (setq yaml-indent-offset 2)
  (define-key yaml-mode-map "\C-m" 'newline-and-indent)
  (add-hook 'before-save-hook (lambda()
                                (whitespace-cleanup))))
(add-hook 'yaml-mode-hook 'mor-yaml-mode-hooks)

;; =========================================================================================
;; Jenkins file mode
;; =========================================================================================
;; wget https://raw.githubusercontent.com/john2x/jenkinsfile-mode/master/jenkinsfile-mode.el
(add-to-list 'load-path "~/.emacs.d/jenkinsfile-mode")
(require 'jenkinsfile-mode)

(provide '.emacs)

;; Local Variables:
;; coding: utf-8
;; buffer-file-coding-system: utf-8
;; indent-tabs-mode: nil
;; End:
;;; .emacs ends here
